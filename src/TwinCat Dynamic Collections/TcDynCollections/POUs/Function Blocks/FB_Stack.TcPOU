<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Stack" Id="{33f13e36-9900-42f1-bbaa-06171dd380dc}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Stack EXTENDS FB_Collections IMPLEMENTS I_Stack
VAR_INPUT
	ipList : I_List; // List to perform operations on.
END_VAR
VAR_OUTPUT
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="_Count" Id="{6c6d10a0-21f3-4bac-8a60-85e10ab31bd4}">
      <Declaration><![CDATA[(* Number of elements in the stack *)
PROPERTY _Count : DINT]]></Declaration>
      <Get Name="Get" Id="{2f584baf-f990-4f7f-93aa-d61bdaaaa2a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Count := THIS^.ipList._Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Is_Empty" Id="{c4bbeb7d-fae9-42a1-b2a4-5741ec24557f}">
      <Declaration><![CDATA[(* Checks of stack is empty.*)
PROPERTY _Is_Empty : BOOL]]></Declaration>
      <Get Name="Get" Id="{4612090c-cf1a-4838-88d6-0b3ee7013bfd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Is_Empty := THIS^.ipList._Is_Empty;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CatchError" Id="{0532b148-4715-4b7e-8183-5316fd5e6f33}">
      <Declaration><![CDATA[METHOD PROTECTED CatchError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[stError := THIS^.ipList._Error_Status;
CatchError := stError.bSTATUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{65bd9818-53a0-463c-b8c9-56e30725b5f8}">
      <Declaration><![CDATA[(* Empties/Clears/Deletes every item on the stack*)
METHOD Clear
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ipList.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Peek" Id="{1f724740-b293-42b6-af19-3d12e5260d01}">
      <Declaration><![CDATA[(* Get item from stack without removing it. *)
METHOD Peek : I_Stack
VAR_INPUT
	Item 	: ANY; (* Variable to store returned item value *)
	nIndex 	: DINT; (* Location of item*)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Peek := THIS^;
THIS^.ipList.Get(Item, nIndex);
THIS^.CatchError();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pop" Id="{7d2c9231-7418-4d01-a950-6dddff60807b}">
      <Declaration><![CDATA[(* Gets and deletes item at the top of the stack *)
METHOD Pop : I_Stack
VAR_INPUT
	Item : ANY; (* Variable to store returned item value *)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Pop := THIS^;
THIS^.ipList.Get_First(Item);
IF THIS^.CatchError() THEN RETURN; END_IF;
THIS^.ipList.Remove();
THIS^.CatchError();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Pop_Void" Id="{c9348d36-9274-4a3a-ab38-d78573b18931}">
      <Declaration><![CDATA[(* Removes item at the top of the stack without returning anything *)
METHOD Pop_Void : I_Stack
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Pop_Void := THIS^;
THIS^.ipList.Remove();
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Push" Id="{cb7bde85-03c7-45e8-8fe5-d7ebdc1b671d}">
      <Declaration><![CDATA[(* Add item to the top of the stack *)
METHOD Push : I_Stack
VAR_INPUT
	Item : ANY; (* Variable containg data to store on the stack *)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Push := THIS^;
THIS^.ipList.Add_Front(Item);
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reverse" Id="{ba9ac5a5-fcd7-4b04-b30f-42da8bbcce9b}">
      <Declaration><![CDATA[(* Reverses order of items on stack *)
METHOD Reverse : I_Stack
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reverse := THIS^;
THIS^.ipList.Reverse();
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Top" Id="{7d111dc0-613d-4f39-bd9f-26a418db706e}">
      <Declaration><![CDATA[(* Get item at the top of the stack without removing it. *)
METHOD Top : I_Stack
VAR_INPUT
	Item 	: ANY; (* Variable to store returned item value *)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Top := THIS^;
THIS^.ipList.Get_First(Item);
IF THIS^.CatchError() THEN RETURN; END_IF;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Stack">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Stack._Count.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Stack._Is_Empty.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Stack.CatchError">
      <LineId Id="5" Count="1" />
    </LineIds>
    <LineIds Name="FB_Stack.Clear">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Stack.Peek">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="2" />
    </LineIds>
    <LineIds Name="FB_Stack.Pop">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Stack.Pop_Void">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Stack.Push">
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="1" />
    </LineIds>
    <LineIds Name="FB_Stack.Reverse">
      <LineId Id="5" Count="0" />
      <LineId Id="7" Count="1" />
    </LineIds>
    <LineIds Name="FB_Stack.Top">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>