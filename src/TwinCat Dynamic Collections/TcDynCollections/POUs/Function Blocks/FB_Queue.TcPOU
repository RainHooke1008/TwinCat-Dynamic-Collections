<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Queue" Id="{c0a25d3b-3294-43fd-9bd2-3bf3486c2d23}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Queue EXTENDS FB_Collections  IMPLEMENTS I_Queue
VAR_INPUT
	ipList : I_List; // List to perform operations on.
END_VAR
VAR
	//ipItems_List : I_List; // List holding items on the queue
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="_Count" Id="{4980f9f4-e529-4835-9d02-e0820fac350a}">
      <Declaration><![CDATA[(* Number of items in queue*)
PROPERTY _Count : DINT
]]></Declaration>
      <Get Name="Get" Id="{699f6c1f-1997-44e0-9196-f27626bb4a8b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Count := THIS^.ipList._Count;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="_Is_Empty" Id="{b2cc4ea1-9af3-4348-b1a8-14581439c42b}">
      <Declaration><![CDATA[(* Checks of queue is empty.*)
PROPERTY _Is_Empty : BOOL
]]></Declaration>
      <Get Name="Get" Id="{d0d3dd0b-a078-4014-b6a2-e264180a9714}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Is_Empty := THIS^.ipList._Is_Empty;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CatchError" Id="{ff942c32-b1f2-46ab-998e-004a022407f0}">
      <Declaration><![CDATA[METHOD PROTECTED CatchError : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//THIS^.ipItems_List(stError => THIS^.stError);
THIS^.stError := ipList._Error_Status;
CatchError := stError.bSTATUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{76443963-9b9c-4996-b3e7-fc775a7561d8}">
      <Declaration><![CDATA[(* Empties/Clears/Deletes every item on the queue*)
METHOD Clear
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.ipList.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Dequeue" Id="{e93db59e-1376-4260-b5d7-9c96340c297e}">
      <Declaration><![CDATA[(* Gets and remove item at the front of the queue *)
METHOD Dequeue : I_Queue
VAR_INPUT
	Item : ANY; (* Variable to store returned item value *)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Dequeue := THIS^;
THIS^.ipList.Get_First(Item);
IF THIS^.CatchError() THEN RETURN; END_IF;
THIS^.ipList.Remove();
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Dequeue_Void" Id="{fb75845f-f99c-4e28-94cd-b00a8977d52c}">
      <Declaration><![CDATA[(* Removes item at the front of the queue without returning anything *)
METHOD Dequeue_Void : I_Queue
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Dequeue_Void := THIS^;
THIS^.ipList.Remove();
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enqueue" Id="{407277f4-3eec-4c29-a153-3392e4cf9679}">
      <Declaration><![CDATA[(* Adds item at the back of the queue *)
METHOD Enqueue : I_Queue
VAR_INPUT
	Item : ANY; (* Variable containg data to store on the queue *)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Enqueue := THIS^;
THIS^.ipList.Add_Back(Item);
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enqueue_At_Front" Id="{b3f4e9ed-60eb-4205-a930-b6e55d94d98e}">
      <Declaration><![CDATA[(* Adds item at the front of the queue *)
METHOD Enqueue_At_Front : I_Queue
VAR_INPUT
	Item : ANY; (* Variable containg data to store on the queue *)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Enqueue_At_Front := THIS^;
THIS^.ipList.Add_Front(Item);
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Peek" Id="{bd5b0349-051a-47b0-b681-deca70a87271}">
      <Declaration><![CDATA[(* Get item from the queue without removing it. *)
METHOD Peek : I_Queue
VAR_INPUT
	Item 	: ANY; (* Variable to store returned item value *)
	nIndex 	: DINT; (* Location of item*)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Peek := THIS^;
THIS^.ipList.Get(Item, nIndex);
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reverse" Id="{379b4de2-5f3c-405e-9591-f9fd46fb229d}">
      <Declaration><![CDATA[METHOD Reverse : I_Queue
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reverse := THIS^;
THIS^.ipList.Reverse();
THIS^.CatchError();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Queue">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue._Count.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue._Is_Empty.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.CatchError">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Clear">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Dequeue">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Dequeue_Void">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Enqueue">
      <LineId Id="5" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Enqueue_At_Front">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Peek">
      <LineId Id="11" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Queue.Reverse">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>