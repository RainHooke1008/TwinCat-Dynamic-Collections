<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_Array_List" Id="{3398cc05-41ff-4913-b370-09ed9360d50e}" SpecialFunc="None">
    <Declaration><![CDATA[(* A dynamic array that holds data of multiple types and can grow or shrink at run time. *)
FUNCTION_BLOCK FB_Array_List EXTENDS FB_Collections IMPLEMENTS I_List, I_List_ReadOnly, I_List_WriteOnly
VAR
	pData 		: POINTER TO ST_GENERIC;
END_VAR
VAR CONSTANT
	{warning disable C0228}
	stData 		: ST_GENERIC := (TypeClass := __SYSTEM.TYPE_CLASS.TYPE_NONE);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Exceptions" Id="{e734c857-e916-4d79-8501-5a7d89fc83f9}" />
    <Folder Name="Protected" Id="{f785d1e7-3af7-4c08-9480-c601a70827ef}" />
    <Property Name="_Is_Empty" Id="{b351982a-f8a1-415d-9a5a-644537b434ce}">
      <Declaration><![CDATA[(* Checks of list is empty.*)
PROPERTY _Is_Empty : BOOL]]></Declaration>
      <Get Name="Get" Id="{e85b6b93-361c-4dbe-a8c2-9f94e7dedbb7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_Is_Empty := THIS^.nCount = 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Add_Back" Id="{0dcfcc17-f884-4372-9d9d-f7c7855969d9}">
      <Declaration><![CDATA[// Adds an item to the end of the list
METHOD Add_Back : I_List
VAR_INPUT
	Item 	: ANY; // Item to store in list
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Add_Back := THIS^;
IF THIS^._Is_Empty THEN THIS^.FB_init(FALSE,FALSE, 1); THIS^.Set(Item, 0); RETURN; END_IF
THIS^.Resize(THIS^._Count+1);
THIS^.Free_Value(THIS^.pData[THIS^._Count-1]);
THIS^.pData[THIS^._Count-1] := THIS^.Malloc_Value(Item);
THIS^.CopyValueTo(THIS^.pData[THIS^._Count-1], Item);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Add_Front" Id="{0f7f2cfd-3435-4a27-a0df-bc7fcb94e712}">
      <Declaration><![CDATA[// Adds an item at the front of the list
METHOD Add_Front : I_List
VAR_INPUT
	Item 	: ANY; // Item to store in list
END_VAR
VAR
	pOld_Data : POINTER TO ST_GENERIC;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Add_Front := THIS^;
IF THIS^._Is_Empty THEN THIS^.FB_init(FALSE,FALSE, 1); THIS^.Set(Item, 0); RETURN; END_IF

pOld_Data := THIS^.pData;
THIS^.pData := THIS^.Malloc_Array(THIS^._Count+1);

FOR i := 1 TO THIS^._Count DO
	THIS^.pData[i] := THIS^.Malloc_Value(pOld_Data[i-1]);
	THIS^.CopyValueTo(THIS^.pData[i], pOld_Data[i-1]);
	THIS^.Free_Value(pOld_Data[i-1]);
	END_FOR
__DELETE(pOld_Data);
THIS^.Set(Item, 0);
THIS^.IncrementCount();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clear" Id="{037c4338-bc5a-4989-bc9a-2ac5dcbbc7e3}">
      <Declaration><![CDATA[// Empties/Clears/Deletes every item in the list
METHOD Clear
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT(THIS^._Is_Empty) THEN 
	FOR i := 0 TO THIS^._Count - 1 DO THIS^.Free_Value(THIS^.pData[i]); END_FOR
	__DELETE(THIS^.pData); 
	THIS^.nCount := 0; 
	END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ClearException" Id="{1f624312-52cc-4dd6-abeb-d26a86d9e069}" FolderPath="Exceptions\">
      <Declaration><![CDATA[METHOD PROTECTED ClearException : BOOL;
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ClearException 	:= stError.bSTATUS := FALSE;
stError.nCODE 	:= 0;
stError.sSOURCE := 'No error.';]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopyValueTo" Id="{930ed18d-7aa0-479e-bf7e-a1fb05ee0f8f}" FolderPath="Protected\">
      <Declaration><![CDATA[// Copy data from source memory space to desination memory space
METHOD PROTECTED CopyValueTo
VAR_INPUT
	Dest, Src 	: __SYSTEM.AnyType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMMOVE(Dest.pValue, Src.pValue, TO_UDINT(Src.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="DecrementCount" Id="{ead82939-1a86-4d74-a184-5abfb27cd92a}" FolderPath="Protected\">
      <Declaration><![CDATA[// Decrement list size by 1.
METHOD PROTECTED DecrementCount
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.nCount := THIS^.nCount - 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="EmptyListException" Id="{32a3a647-32a8-4f7a-83f4-2f5352d89f36}" FolderPath="Exceptions\">
      <Declaration><![CDATA[// Raises an expection if list is empty
METHOD PROTECTED EmptyListException : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF THIS^._Is_Empty THEN
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 2936;
	stError.sSOURCE := 'List is empty';
ELSE
	This^.ClearException();
	END_IF
EmptyListException := stError.bSTATUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{69cc1df2-fe01-475e-a429-641abfcc4977}">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Clear();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{29c8a4d3-d2c7-4973-a7b4-e7bf44d3146c}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains 	: BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode 	: BOOL; // if TRUE, the instance afterwards gets moved into the copy code (online change)
	nLength 		: DINT; // Length to initialise array with.
END_VAR
VAR
	i, nByte_Size 	: DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Clear();
IF nLength <= 0 THEN RETURN; END_IF
THIS^.nCount := nLength;
THIS^.pData := THIS^.Malloc_Array(nLength);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{1a5a68ff-6d3b-49a7-839e-50cc056dc26c}">
      <Declaration><![CDATA[// Find the location of an item in list.
METHOD Find : I_List
VAR_INPUT
	Item 	: ANY; // Item to find in list
END_VAR
VAR_OUTPUT
	nIndex	: DINT; //Location of item in list 
END_VAR
VAR
	i : DINT;
	n : DINT := -1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Find := THIS^;
IF THIS^.EmptyListException() THEN nIndex := -1; RETURN; END_IF
FOR i := 0 TO THIS^._Count-1 DO
	IF (THIS^.pData[i].pValue = 0) 					 THEN CONTINUE; END_IF
	IF (Item.TypeClass <> THIS^.pData[i].TypeClass) THEN CONTINUE; END_IF
	IF (Item.pValue^ <> THIS^.pData[i].pValue^) 	 THEN CONTINUE; END_IF
	
	CASE Item.TypeClass OF
		__SYSTEM.TYPE_CLASS.TYPE_STRING:
			IF LEN2(Item.pValue) <> LEN2(THIS^.pData[i].pValue) THEN CONTINUE; END_IF
			n := MEMCMP(Item.pValue, THIS^.pData[i].pValue, LEN2(THIS^.pData[i].pValue)+1);
				
		__SYSTEM.TYPE_CLASS.TYPE_WSTRING:
			IF WLEN2(Item.pValue) <> WLEN2(THIS^.pData[i].pValue) THEN CONTINUE; END_IF
			n := MEMCMP(Item.pValue, THIS^.pData[i].pValue, (WLEN2(THIS^.pData[i].pValue)*SIZEOF(WORD))+1);
	ELSE
		IF (Item.diSize <> THIS^.pData[i].diSize) THEN CONTINUE; END_IF	
		n := MEMCMP(Item.pValue, THIS^.pData[i].pValue, TO_UDINT(Item.diSize));
		END_CASE
		IF n = 0 THEN nIndex := i; RETURN; END_IF
	END_FOR
nIndex := -1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Free_Value" Id="{9f71f167-bfad-4dcd-86c0-bb97ee5d1fcc}" FolderPath="Protected\">
      <Declaration><![CDATA[// Deletes/frees Generic value's value from memory
METHOD PROTECTED Free_Value
VAR_INPUT
	Variable : __SYSTEM.AnyType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Variable.pValue = 0 THEN RETURN; END_IF
__DELETE(Variable.pValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{4014cfee-43c7-449c-8614-f18500666b2d}">
      <Declaration><![CDATA[// Gets item at specified location;
METHOD Get : I_List
VAR_INPUT
	Return_Item 	: ANY;  // Variable to store requested node value
	nIndex 			: DINT; // Location of node
END_VAR
VAR_INST
	data : ST_GENERIC;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get := THIS^;
IF THIS^.EmptyListException() OR THIS^.OutOfBoundsException(nIndex) THEN THIS^.SetValue(Return_Item, 16#0); RETURN; END_IF
IF THIS^.TypeMismatchException(Return_Item, THIS^.pData[nIndex]) THEN THIS^.SetValue(Return_Item, 16#0); RETURN; END_IF
THIS^.CopyValueTo(Return_Item, THIS^.pData[nIndex]);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_First" Id="{1fef9e41-e429-4f69-b1a8-c18b18a4a82e}">
      <Declaration><![CDATA[// Gets item at the front of the list 
METHOD Get_First : I_List
VAR_INPUT
	Return_Item 	: ANY; // Variable to store returned item
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get_First := THIS^;
THIS^.Get(Return_Item, 0);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get_Value_As_String" Id="{3b246761-be37-4cc8-80b6-a822f2065792}">
      <Declaration><![CDATA[// Returns item as a string, if type to string conversion is supported
METHOD Get_Value_As_String : I_List
VAR_INPUT
	nIndex	: DINT; // Location of item
END_VAR
VAR_OUTPUT
	sItem 	: T_MaxString; // Variable to store returned item
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Get_Value_As_String := THIS^;
IF THIS^.EmptyListException() OR THIS^.OutOfBoundsException(nIndex) THEN sItem := 'ERR: List is Empty or index Out of Bounds'; RETURN; END_IF
sItem := THIS^.pData[nIndex].sValue;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetValueAsString" Id="{780fd6c6-55a3-4565-9cee-434004075cc7}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED GetValueAsString : T_MaxString
VAR_INPUT
	 Value : __SYSTEM.AnyType;
END_VAR
VAR	
	pBool			: POINTER TO BOOL;
    pByte			: POINTER TO BYTE;
    pWord			: POINTER TO WORD;
    pDWord			: POINTER TO DWORD;
    pLWord			: POINTER TO LWORD;
    pSint			: POINTER TO SINT;
    pInt			: POINTER TO INT;
    pDint			: POINTER TO DINT;
    pLint			: POINTER TO LINT;
    pUSint			: POINTER TO USINT;
    pUInt			: POINTER TO UINT;
    pUDint			: POINTER TO UDINT;
    pULint			: POINTER TO ULINT;
    pReal			: POINTER TO REAL;
    pLReal			: POINTER TO LREAL;
    pString			: POINTER TO STRING(255);
    pWString		: POINTER TO WSTRING;
    pTime			: POINTER TO TIME;
    pDate			: POINTER TO DATE;
    pDate_And_Time	: POINTER TO DATE_AND_TIME;
    pTime_Of_Day	: POINTER TO TIME_OF_DAY;
    pPointer		: PVOID;
	pLTime 			: POINTER TO LTIME;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Value.pValue = 0 THEN GetValueAsString := 'NULL'; RETURN; END_IF;

CASE Value.TypeClass OF 
	__SYSTEM.TYPE_CLASS.TYPE_BOOL:
		pBool := Value.pValue;
		GetValueAsString := TO_STRING(pBool^);
		
    __SYSTEM.TYPE_CLASS.TYPE_BYTE:
		pByte := Value.pValue;
		GetValueAsString := TO_STRING(pByte^);
		
    __SYSTEM.TYPE_CLASS.TYPE_WORD:
		pWord := Value.pValue;
		GetValueAsString := TO_STRING(pWord^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DWORD:
		pDWord := Value.pValue;
		GetValueAsString := TO_STRING(pDWord^);
		
    __SYSTEM.TYPE_CLASS.TYPE_LWORD:
		pLWord := Value.pValue;
		GetValueAsString := TO_STRING(pLWord^);
		
    __SYSTEM.TYPE_CLASS.TYPE_SINT:
		pSint := Value.pValue;
		GetValueAsString := TO_STRING(pSint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_INT:
		pInt := Value.pValue;
		GetValueAsString := TO_STRING(pInt^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DINT:
		pDint := Value.pValue;
		GetValueAsString := TO_STRING(pDint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_LINT:
		pLint := Value.pValue;
		GetValueAsString := TO_STRING(pLint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_USINT:
		pUSint := Value.pValue;
		GetValueAsString := TO_STRING(pUSint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_UINT:
		pUInt := Value.pValue;
		GetValueAsString := TO_STRING(pUInt^);
		
    __SYSTEM.TYPE_CLASS.TYPE_UDINT:
		pUDint := Value.pValue;
		GetValueAsString := TO_STRING(pUDint^);
		
    __SYSTEM.TYPE_CLASS.TYPE_ULINT:
		pULint := Value.pValue;
		GetValueAsString := TO_STRING(pULint^);
		
   __SYSTEM.TYPE_CLASS.TYPE_REAL:
		pReal := Value.pValue;
		GetValueAsString := TO_STRING(pReal^);
		
    __SYSTEM.TYPE_CLASS.TYPE_LREAL:
		pLReal := Value.pValue;
		GetValueAsString := TO_STRING(pLReal^);
		
    __SYSTEM.TYPE_CLASS.TYPE_STRING:
		pString := Value.pValue;
		GetValueAsString := TO_STRING(pString^);
		
   __SYSTEM.TYPE_CLASS.TYPE_WSTRING:
		pWString := Value.pValue;
		GetValueAsString := TO_STRING(pWString^);
		
    __SYSTEM.TYPE_CLASS.TYPE_TIME:
		pTime := Value.pValue;
		GetValueAsString := TO_STRING(pTime^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DATE:
		pDate := Value.pValue;
		GetValueAsString := TO_STRING(pDate^);
		
    __SYSTEM.TYPE_CLASS.TYPE_DATEANDTIME:
		pDate_And_Time := Value.pValue;
		GetValueAsString := TO_STRING(pDate_And_Time^);
		
    __SYSTEM.TYPE_CLASS.TYPE_TIMEOFDAY:
		pTime_Of_Day := Value.pValue;
		GetValueAsString := TO_STRING(pTime_Of_Day^);
	
	__SYSTEM.TYPE_CLASS.TYPE_POINTER:
		GetValueAsString := TO_STRING(Value.pValue);
		
	__SYSTEM.TYPE_CLASS.TYPE_LTIME:
		pLTime := Value.pValue;
		GetValueAsString := TO_STRING(pLTime^);
ELSE
	GetValueAsString := 'TYPE TO STRING CONVERSION NOT SUPPORTED BY THIS TYPE'; 
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="IncrementCount" Id="{a9db66a7-53d7-42c7-9976-512a55b7dba0}" FolderPath="Protected\">
      <Declaration><![CDATA[// Increments list size by 1
METHOD PROTECTED IncrementCount
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.nCount := THIS^.nCount + 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Insert" Id="{db43b154-8e54-4ca2-8744-cc4fbfa5556a}">
      <Declaration><![CDATA[// Adds new item to list at specified location, if index = 0, item will be added at the front, if index = count, item will be added at the back
METHOD Insert : I_List
VAR_INPUT
	Item 	: ANY;  // Item to store in list
	nIndex 	: DINT; // Location of item
END_VAR
VAR
	pOld_Data : POINTER TO ST_GENERIC;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Insert := THIS^;
IF nIndex = 0 THEN THIS^.Add_Front(Item); RETURN; END_IF
IF nIndex = THIS^._Count THEN THIS^.Add_Back(Item); RETURN; END_IF
IF THIS^.OutOfBoundsException(nIndex) THEN RETURN; END_IF

pOld_Data := THIS^.pData;
THIS^.pData := THIS^.Malloc_Array(THIS^._Count+1);
THIS^.IncrementCount();

FOR i := 0 TO nIndex-1 DO
	THIS^.pData[i] := THIS^.Malloc_Value(pOld_Data[i]);
	THIS^.CopyValueTo(THIS^.pData[i], pOld_Data[i]);
	THIS^.Free_Value(pOld_Data[i]);
	END_FOR
	
THIS^.Set(Item, nIndex);
	
FOR i := nIndex+1 TO THIS^._Count-1 DO
	THIS^.pData[i] := THIS^.Malloc_Value(pOld_Data[i-1]);
	THIS^.CopyValueTo(THIS^.pData[i], pOld_Data[i-1]);
	THIS^.Free_Value(pOld_Data[i-1]);
	END_FOR
__DELETE(pOld_Data);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LessThanZeroException" Id="{f039637d-30e1-4498-81c0-274a05cceec0}" FolderPath="Exceptions\">
      <Declaration><![CDATA[METHOD PROTECTED LessThanZeroException : BOOL
VAR_INPUT
	nIndex : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nIndex < 0) THEN
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 5365;
	stError.sSOURCE := 'Out of bounds. Index is less than zero.';
ELSE
	This^.ClearException();
	END_IF
LessThanZeroException := stError.bSTATUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Malloc_Array" Id="{6833d68d-5fb5-48db-80e2-ff5020b03ac9}" FolderPath="Protected\">
      <Declaration><![CDATA[// Allocate memory space for Array of Generics on the heap, returns Pointer to start of Generic Array;
// WARNING!!! Always have a place to store the return otherwise a memory leak will occur.
METHOD PROTECTED Malloc_Array : POINTER TO ST_GENERIC
VAR_INPUT
	nSize : DINT; // Array Size
END_VAR
VAR
	i, nByte_Size: DINT;
END_VAR
VAR CONSTANT
	{warning disable C0228}
	stData 		: ST_GENERIC;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[nByte_Size := SIZEOF(ST_GENERIC)*nSize;
Malloc_Array := __NEW(BYTE, TO_UDINT(nByte_Size));]]></ST>
      </Implementation>
    </Method>
    <Method Name="Malloc_Value" Id="{d4fc3706-841e-4d2c-a297-ce7edce50b78}" FolderPath="Protected\">
      <Declaration><![CDATA[// Allocate memory space for the Generic value's data on the heap, returns Generic;
// WARNING!!! Always have a place to store the return otherwise a memory leak will occur.
METHOD PROTECTED Malloc_Value : ST_GENERIC
VAR_INPUT
	Variable : __SYSTEM.AnyType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Malloc_Value.sValue 	:= THIS^.GetValueAsString(Variable);
Malloc_Value.pValue 	:= __NEW(BYTE, TO_UDINT(Variable.diSize)); // Allocate space in memory to store data value.
Malloc_Value.diSize 	:= Variable.diSize;
Malloc_Value.TypeClass 	:= Variable.TypeClass;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MemCmpErrExpection" Id="{5270d2ae-4ea6-4e97-bc47-c89f510d8acf}" FolderPath="Exceptions\">
      <Declaration><![CDATA[// Compares memory sizes of 2 addresses. Returns TRUE  and raises error flag if theyre not same size.
METHOD PROTECTED MemCmpErrExpection : BOOL
VAR_INPUT
	pDestAddr,
	pSrcAddr 	: PVOID;
	nSize 		: UDINT;
END_VAR
VAR_INST
	nMemErr : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nMemErr := MEMCMP(pDestAddr, pSrcAddr, nSize);
IF nMemErr = -1 THEN 
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 4129;
	stError.sSOURCE := 'Incorrect parameter values. Destination address smaller than source address';
	
ELSIF nMemErr = 0 THEN THIS^.ClearException();
	
ELSIF nMemErr = 1 THEN
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 4823;
	stError.sSOURCE := 'Incorrect parameter values. Destination address greater that source address';

ELSE
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 4564;
	stError.sSOURCE := 'Incorrect parameter values. Pointer to destination/source address is NULL or allocated address memory is NULL.';
	END_IF

MemCmpErrExpection := stError.bSTATUS;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="OutOfBoundsException" Id="{d1f00778-4bda-479e-acb6-1b055b01bf01}" FolderPath="Exceptions\">
      <Declaration><![CDATA[METHOD PROTECTED OutOfBoundsException : BOOL
VAR_INPUT
	nIndex : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (nIndex < 0) OR (nIndex >= THIS^._Count) THEN
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 5374;
	stError.sSOURCE := 'Out of bounds. You tried to access data outside the range of this list.';
ELSE
	This^.ClearException();
	END_IF
OutOfBoundsException := stError.bSTATUS;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Remove" Id="{4e1b5bf9-f368-49b8-a717-3e5f099b41d6}">
      <Declaration><![CDATA[// Removes item at the front of the list and returns nothing
METHOD Remove : I_List
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Remove := THIS^;
IF THIS^.EmptyListException() THEN RETURN; END_IF
IF THIS^._Count = 1 THEN THIS^.Clear(); RETURN; END_IF;
THIS^.Free_Value(THIS^.pData[0]);
FOR i := 0 TO THIS^._Count-2 DO THIS^.pData[i] := THIS^.pData[i+1]; END_FOR
THIS^.Resize(THIS^._Count-1);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveAt" Id="{9ca86d02-6b94-4c36-839e-e70bc6a3c02e}">
      <Declaration><![CDATA[// Remove item at specified location and return nothing
METHOD RemoveAt : I_List
VAR_INPUT
	nIndex : DINT; // Location of item
END_VAR
VAR
	i : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[RemoveAt := THIS^;
IF THIS^.EmptyListException() THEN RETURN; END_IF
IF THIS^.OutOfBoundsException(nIndex) THEN RETURN; END_IF
IF nIndex = 0 THEN THIS^.Remove(); RETURN; END_IF
IF nIndex = THIS^._Count - 1 THEN THIS^.Resize(THIS^._Count - 1); RETURN; END_IF
THIS^.Free_Value(THIS^.pData[nIndex]);
FOR i := nIndex TO THIS^._Count-1 DO THIS^.pData[i] := THIS^.pData[i+1]; END_FOR
THIS^.Resize(THIS^._Count-1);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Resize" Id="{469d389a-1b12-4e2e-9bd9-9bf1498b5d95}">
      <Declaration><![CDATA[// Manually resize list. If list becomes smaller, items on higher locations will be deleted.
METHOD Resize : I_List
VAR_INPUT
	nSize : DINT; // New size of list.
END_VAR
VAR
	pOld_Data 		: POINTER TO ST_GENERIC;
	i,
	nOld_Data_Count, 
	nByte_Size : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Resize := THIS^;
IF THIS^.LessThanZeroException(nSize) THEN RETURN; END_IF
IF (nSize = 0) THEN THIS^.Clear(); RETURN; END_IF
IF nSize = THIS^._Count THEN RETURN; END_IF
IF THIS^._Is_Empty THEN THIS^.FB_init(FALSE,FALSE, nSize); RETURN; END_IF

pOld_Data 		:= THIS^.pData;
nOld_Data_Count := THIS^._Count;

THIS^.pData := THIS^.Malloc_Array(nSize);

FOR i := 0 TO nSize - 1 DO
	IF (i = nOld_Data_Count) AND (nSize > nOld_Data_Count) THEN EXIT; END_IF
	THIS^.pData[i] := THIS^.Malloc_Value(pOld_Data[i]);
	THIS^.CopyValueTo(THIS^.pData[i], pOld_Data[i]);
	THIS^.Free_Value(pOld_Data[i]);
	END_FOR
__DELETE(pOld_Data);
THIS^.nCount := nSize;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reverse" Id="{1f2d66c0-fa85-4cf7-9c54-2b7bc26f5b50}">
      <Declaration><![CDATA[// Reverses the order of items in the list
METHOD Reverse : I_List
VAR
	pOld_Data 	: POINTER TO ST_GENERIC;
	nByte_Size 	: DINT;
	i			: DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Reverse := THIS^;
IF THIS^.EmptyListException() THEN RETURN; END_IF
IF THIS^._Count = 1 THEN RETURN; END_IF

pOld_Data 	:= THIS^.pData;

THIS^.pData := THIS^.Malloc_Array(THIS^._Count);

FOR i:= 0 TO THIS^._Count - 1 DO
	THIS^.pData[i] := THIS^.Malloc_Value(pOld_Data[(THIS^._Count-1)-i]);
	THIS^.CopyValueTo(THIS^.pData[i], pOld_Data[(THIS^._Count-1)-i]);
	THIS^.Free_Value(pOld_Data[(THIS^._Count-1)-i]);
	END_FOR
__DELETE(pOld_Data);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{b6a02544-884f-43b8-b6ab-cf3ddf1cdc6f}">
      <Declaration><![CDATA[// Adds new item to list in the specified location without resizing list
METHOD Set : I_List
VAR_INPUT
	Item 	: ANY; 	// Item to store in list
	nIndex 	: DINT; // Location of item
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Set := THIS^;
IF THIS^.OutOfBoundsException(nIndex) OR THIS^.EmptyListException() THEN RETURN; END_IF
THIS^.Free_Value(THIS^.pData[nIndex]);
THIS^.pData[nIndex] := THIS^.Malloc_Value(Item);
THIS^.CopyValueTo(THIS^.pData[nIndex], Item);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetValue" Id="{bc44b6d1-9f86-424b-94f8-c98542845f75}" FolderPath="Protected\">
      <Declaration><![CDATA[(* Set value of __SYSTEM.Anytype variable *)
METHOD PROTECTED SetValue
VAR_INPUT
	Variable	: __SYSTEM.Anytype;
	Value 		: USINT; // Character/byte to set.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMSET(Variable.pValue, Value, TO_UDINT(Variable.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TypeMismatchException" Id="{6aeaaea9-9da8-4a22-9e0d-167bc99d17b1}" FolderPath="Exceptions\">
      <Declaration><![CDATA[METHOD TypeMismatchException : BOOL
VAR_INPUT
	Dest,
	Src 	: __SYSTEM.AnyType;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dest.diSize <> Src.diSize THEN
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 3172;
	stError.sSOURCE := 'Type mismatch. Byte sizes are not the same';
ELSIF Dest.TypeClass <> Src.TypeClass THEN
	stError.bSTATUS := TRUE;
	stError.nCODE 	:= 3172;
	stError.sSOURCE := 'Type mismatch. Type classes are not the same';
ELSE
	THIS^.ClearException();
END_IF
TypeMismatchException := stError.bSTATUS;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Array_List">
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List._Is_Empty.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Add_Back">
      <LineId Id="30" Count="4" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Add_Front">
      <LineId Id="53" Count="12" />
      <LineId Id="31" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Clear">
      <LineId Id="4" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="2" />
    </LineIds>
    <LineIds Name="FB_Array_List.ClearException">
      <LineId Id="6" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.CopyValueTo">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.DecrementCount">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.EmptyListException">
      <LineId Id="13" Count="5" />
      <LineId Id="8" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.FB_exit">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.FB_init">
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Find">
      <LineId Id="147" Count="20" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Free_Value">
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Get">
      <LineId Id="65" Count="3" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Get_First">
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Get_Value_As_String">
      <LineId Id="31" Count="1" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.GetValueAsString">
      <LineId Id="336" Count="0" />
      <LineId Id="335" Count="0" />
      <LineId Id="210" Count="92" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.IncrementCount">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Insert">
      <LineId Id="124" Count="22" />
      <LineId Id="67" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.LessThanZeroException">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="4" />
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Malloc_Array">
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Malloc_Value">
      <LineId Id="35" Count="2" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.MemCmpErrExpection">
      <LineId Id="131" Count="19" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.OutOfBoundsException">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="4" />
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Remove">
      <LineId Id="3" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.RemoveAt">
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Resize">
      <LineId Id="63" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="103" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="67" Count="2" />
      <LineId Id="158" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="136" Count="6" />
      <LineId Id="135" Count="0" />
      <LineId Id="144" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Reverse">
      <LineId Id="5" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.Set">
      <LineId Id="43" Count="3" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.SetValue">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_Array_List.TypeMismatchException">
      <LineId Id="5" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>